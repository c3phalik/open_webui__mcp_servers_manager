
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MCPServerType {
  Local
  Remote
}

enum RemoteServerType {
  sse
  streamable_http @map("streamable-http")
}

// BetterAuth Models - using exact schema BetterAuth expects

model User {
  id            String   @id
  name          String?
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts   Account[]
  sessions   Session[]
  mcpServers McpServer[]
  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@map("user")
}

model Account {
  id                    String    @id
  accountId             String    @unique
  providerId            String
  userId                String
  password              String?
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("account")
}

model Session {
  id        String   @id
  token     String   @unique @map("sessionToken")
  userId    String
  expiresAt DateTime @map("expires")
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@map("session")
}

model McpServer {
  id                 String            @id @default(uuid())
  name               String            @unique
  mcpServerUniqueId  String            @unique @map("mcp_server_unique_id")
  type               MCPServerType
  // User ownership
  userId             String
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  // For Local (command) servers
  command            String? // "npx" or "uvx"
  args               Json? // Array of arguments
  env                Json? // Environment variables (encrypted)
  // For Remote servers
  remoteServerType   RemoteServerType? @map("remote_server_type")
  url                String?
  headers            Json? // Object with header key-value pairs
  // Metadata
  enabled            Boolean           @default(true)
  shareWithWorkspace Boolean           @default(false) @map("share_with_workspace")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
